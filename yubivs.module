<?php
// vim: set foldmethod=marker sw=2 ts=2 et:
/**
 * @file
 * This file provides a yubikey validation server backed on drupal
 */


// {{{ Yubikey api constants
define('YUBIVS_API_VER_20', '2.0');
define('YUBIVS_API_VER_1x', '1.1');
define('YUBIVS_API_VER_11', '1.1');
define('YUBIVS_API_VER_10', '1.0');
// }}}


// {{{ Menu stuff
/**
 * Implements hook_menu().
 */
function yubivs_menu() {
  $items = array();

  // TODO: Implement access callback to handle enable
  //       access to whether V1 or V2 protocol

  // TODO: Implement deliver callback to format response
  //       with private sign

  // ValidationProtocolV20
  $items['wsapi/2.0/verify'] = array(
    'page callback' => 'yubivs_verify',
    'page arguments' => array(YUBIVS_API_VER_20),
    'access callback' => TRUE,
    'delivery callback' => 'yubivs_deliver_callback',
    'file' => 'yubivs.verify.inc',
    'type' => MENU_CALLBACK,
  );

  // ValidationProtocolV10
  // ValidationProtocolV11
  $items['wsapi/verify'] = array(
    'page callback' => 'yubivs_verify',
    'page arguments' => array(YUBIVS_API_VER_1x),
    'delivery callback' => 'yubivs_deliver_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'yubivs.verify.inc',
  );

  $items['admin/config/yubivs'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yubivs_admin_settings'),
    'file' => 'yubivs.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Yubikey',
    'access arguments' => array('access yubikey configuration'),
  );

  return $items;
}


/**
 * Deliver callback
 */
function yubivs_deliver_callback($content) {
  foreach ($content['#request']->response as $name => $response) {
    echo $name . '=' . $response . "\r\n";
  }
}


/**
 * Implements hook_permission().
 */
function yubivs_permission() {
  return array(
    'access yubikey configuration' => array(
      'description' => t('Access Yubikey validation server configuration'),
      'title' => t('Access yubikey configuration'),
      'restrict access' => TRUE,
      ),
    );
}
// }}}


// {{{ Node definition stuff
/**
 * Implements hook_node_info().
 */
function yubivs_node_info() {
  $t = get_t();
  return array(
    'yubivs_ksm' => array(
      'name' => $t('Yubikey key storage server'),
      'base' => 'yubivs_ksm',
      'description' => $t('A yubikey key storage server is a networked key storage server deciphering otp for validation server'),
      'title_label' => $t('Yubikey KSM server url'),
      ),
    'yubivs_client' => array(
      'name' => $t('Yubikey validation server client'),
      'base' => 'yubivs_client',
      'description' => $t('A yubikey key validation server client is a client allowed to verify otp  against this service'),
      'title_label' => $t('Client id'),
      ),
    'yubivs_yubikey' => array(
      'name' => $t('Yubikey'),
      'base' => 'yubivs_yubikey',
      'description' => $t('Yubikey node storage'),
      'title_label' => $t('Yubikey Public id'),
      ),
    );
}
// }}}


// {{{ Form stuff
/**
 * Implements hook_form().
 */
function yubivs_ksm_form($node, $form_state) {
  $type = node_type_get_type($node);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#default_value' => !empty($node->title) ? $node->title : '',
    '#required' => TRUE,
    '#weight' => -5,
  );
  return $form;
}


/**
 * Implements hook_form().
 */
function yubivs_client_form($node, $form_state) {
  $type = node_type_get_type($node);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#default_value' => !empty($node->title) ? $node->title : '',
    '#required' => TRUE,
    '#weight' => -5,
  );
  return $form;
}


/**
 * Implements hook_form().
 */
function yubivs_yubikey_form($node, $form_state) {
  $type = node_type_get_type($node);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#default_value' => !empty($node->title) ? $node->title : '',
    '#required' => TRUE,
    '#weight' => -5,
  );
  return $form;
}
// }}}


// {{{ Loader tools
/**
 * Implements hook_load().
 * This function is used as argument loader. It will return node object
 * if nid passed as parameter is a nodetype yubivs_yubukey
 * otherwise false
 */
function yubivs_yubikey_node_load($nid) {
  $node = node_load($nid);

  if (!($node instanceof stdClass)) return FALSE;
  if (!isset($node->type)) return FALSE;
  if ($node->type === 'yubivs_yubikey') return $node;
  if ($node->type === 'yubivs_client') return $node;
  if ($node->type === 'yubivs_ksm') return $node;

  return FALSE;
}
// }}}

